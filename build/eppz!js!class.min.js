/* eppz!js!class 0.1.6 */
function Class(){}function copyMethodsOfObjectTo(a,b,c,d){if(null!=a&&null!=b){null==d&&(d="_super");for(var e in a){var f=a[e];f instanceof Function!=0&&(b[e]=f,b[e][d]=c)}}}function copyPropertiesOfObjectTo(a,b){if(null!=a&&null!=b)for(var c in a){var d=a[c];d instanceof Function||(b[c]=d)}}Class.prototype.construct=function(){},Class.prototype.className="Class",Class.className="Class",Class.extend=function(instanceMethods,classMethods){var _super=new Object;_super.className=this.className;for(var eachMethodName in this.prototype){var eachMethod=this.prototype[eachMethodName];eachMethod instanceof Function!=0&&(_super[eachMethodName]=function(){var a=arguments.callee.methodName,b=arguments.callee.superclassInstance,c=this.callingInstance;return b[a].apply(c,arguments)},_super[eachMethodName].methodName=eachMethodName,_super[eachMethodName].superclassInstance=this.prototype)}for(var eachMethodName in this){var eachMethod=this[eachMethodName];eachMethod instanceof Function!=0&&(_super[eachMethodName]=function(){var a=arguments.callee.methodName,b=arguments.callee.superclassInstance,c=this.callingInstance;return b[a].apply(c,arguments)},_super[eachMethodName].methodName=eachMethodName,_super[eachMethodName].superclassInstance=this)}var constructorFunction=function(){"skip"!=arguments[0]&&(copyPropertiesOfObjectTo(instanceMethods,this),Object.defineProperty(this,"super",{get:function(){var a=arguments.callee.caller._super;return a.callingInstance=this,a}}),this.construct.apply(this,arguments))},newClassName=null;if(null!=instanceMethods.className&&null==newClassName&&(newClassName=instanceMethods.className),null!=classMethods&&null!=classMethods.className&&null==newClassName&&(newClassName=classMethods.className),null==newClassName&&(newClassName="Class"),"Class"==newClassName)var Class=constructorFunction;else eval("var "+newClassName+" = "+constructorFunction.toString()),eval("var Class = "+newClassName+";");return Class.prototype.superclassName=this.className,Class.superclassName=this.className,Class.prototype.className=newClassName,Class.className=newClassName,Class.prototype=new this("skip"),copyMethodsOfObjectTo(instanceMethods,Class.prototype,_super),copyMethodsOfObjectTo(this,Class,_super),copyMethodsOfObjectTo(classMethods,Class,_super,"__super"),Object.defineProperty(Class,"super",{get:function(){var a=arguments.callee.caller.__super;return a.callingInstance=this,a}}),Class};